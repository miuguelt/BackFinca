#!/usr/bin/env python3
"""
Test completo del workflow de eliminaci√≥n de animales
con todas las optimizaciones implementadas
"""

import sys
import os
import time
from datetime import datetime

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from app.models.animals import Animals
from app.models.breeds import Breeds
from app.models.species import Species
from app.utils.integrity_checker import OptimizedIntegrityChecker

def test_complete_workflow():
    """Test completo del workflow de eliminaci√≥n optimizado"""
    app = create_app()
    
    with app.app_context():
        print("üöÄ Iniciando test completo de eliminaci√≥n optimizada")
        print("=" * 60)
        
        # 1. Verificar que el integrity checker est√° funcionando
        print("\n1. Verificando Integrity Checker optimizado...")
        checker = OptimizedIntegrityChecker()
        
        # Limpiar cache para test limpio
        checker.clear_cache()
        print("   ‚úÖ Cache limpiada")
        
        # 2. Obtener animales de prueba
        print("\n2. Buscando animales para pruebas...")
        animals = Animals.query.limit(5).all()
        
        if not animals:
            print("   ‚ö†Ô∏è  No hay animales para probar. Creando uno de prueba...")
            # Crear animal de prueba
            breed = Breeds.query.first()
            if breed:
                test_animal = Animals(
                    record=f"TEST_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    idBreed=breed.id,
                    idSpecies=breed.idSpecies,
                    status='Activo'
                )
                from app.models.base_model import db
                db.session.add(test_animal)
                db.session.commit()
                animals = [test_animal]
                print(f"   ‚úÖ Animal de prueba creado: ID {test_animal.id}")
            else:
                print("   ‚ùå No hay razas para crear animal de prueba")
                return
        
        # 3. Probar detecci√≥n de dependencias (endpoint optimizado)
        print("\n3. Probando detecci√≥n de dependencias optimizada...")
        for animal in animals[:3]:  # Probar con los primeros 3
            print(f"\n   üêÑ Animal ID {animal.id} - {animal.record}")
            
            # Medir tiempo de detecci√≥n de dependencias
            start_time = time.time()
            dependencies = checker.get_dependencies(animal.id, 'animals')
            end_time = time.time()
            
            detection_time = (end_time - start_time) * 1000
            print(f"   ‚è±Ô∏è  Tiempo detecci√≥n: {detection_time:.2f}ms")
            print(f"   üìä Dependencias encontradas: {len(dependencies)}")
            
            for dep in dependencies:
                print(f"      - {dep['table']}: {dep['count']} registros")
            
            # Verificaci√≥n de rendimiento
            if detection_time < 50:
                print("   ‚úÖ Rendimiento excelente (<50ms)")
            elif detection_time < 200:
                print("   ‚úÖ Rendimiento bueno (<200ms)")
            else:
                print(f"   ‚ö†Ô∏è  Rendimiento necesita mejora ({detection_time:.2f}ms)")
        
        # 4. Probar endpoint de batch dependencies
        print("\n4. Probando batch dependencies endpoint...")
        animal_ids = [a.id for a in animals[:3]]
        
        start_time = time.time()
        batch_deps = checker.get_batch_dependencies(animal_ids, 'animals')
        end_time = time.time()
        
        batch_time = (end_time - start_time) * 1000
        print(f"   ‚è±Ô∏è  Tiempo batch ({len(animal_ids)} animales): {batch_time:.2f}ms")
        print(f"   üìä Resultados batch: {len(batch_deps)} animales procesados")
        
        # 5. Probar cache
        print("\n5. Probando cache de integridad...")
        animal_id = animals[0].id
        
        # Primera llamada (sin cache)
        start_time = time.time()
        deps1 = checker.get_dependencies(animal_id, 'animals')
        first_time = (time.time() - start_time) * 1000
        
        # Segunda llamada (con cache)
        start_time = time.time()
        deps2 = checker.get_dependencies(animal_id, 'animals')
        cached_time = (time.time() - start_time) * 1000
        
        print(f"   ‚è±Ô∏è  Primera llamada: {first_time:.2f}ms")
        print(f"   ‚è±Ô∏è  Segunda llamada: {cached_time:.2f}ms")
        print(f"   üöÄ Speedup cache: {first_time/max(cached_time, 0.1):.1f}x")
        
        if deps1 == deps2:
            print("   ‚úÖ Cache funcionando correctamente")
        else:
            print("   ‚ùå Cache con resultados inconsistentes")
        
        # 6. Simular eliminaci√≥n segura (solo si no hay dependencias)
        print("\n6. Probando eliminaci√≥n segura...")
        safe_animals = [a for a in animals if len(checker.get_dependencies(a.id, 'animals')) == 0]
        
        if safe_animals:
            test_animal = safe_animals[0]
            print(f"   üêÑ Probando eliminaci√≥n de animal ID {test_animal.id}")
            
            # Verificar dependencias antes de eliminar
            final_deps = checker.get_dependencies(test_animal.id, 'animals')
            
            if len(final_deps) == 0:
                print("   ‚úÖ Animal sin dependencias - seguro para eliminar")
                # No eliminamos realmente, solo verificamos que se podr√≠a
                print("   üìù Nota: Eliminaci√≥n simulada (no se borra realmente)")
            else:
                print(f"   ‚ö†Ô∏è  Animal tiene {len(final_deps)} dependencias - no se elimina")
        else:
            print("   ‚ÑπÔ∏è  No hay animales sin dependencias para probar eliminaci√≥n")
        
        # 7. Resumen de rendimiento
        print("\n" + "=" * 60)
        print("üìä RESUMEN DE RENDIMIENTO")
        print("=" * 60)
        
        # Estad√≠sticas del checker
        cache_stats = checker.get_cache_stats()
        print(f"üóÑÔ∏è  Cache entries: {cache_stats.get('entries', 0)}")
        print(f"‚è∞ Cache TTL: {cache_stats.get('ttl', 30)}s")
        
        # Tiempos medidos
        avg_detection_time = sum([
            (time.time() - start_time) * 1000 
            for start_time in [0.001]  # Placeholder
        ]) / max(len(animals), 1)
        
        print(f"‚ö° Tiempos de detecci√≥n: <50ms (objetivo)")
        print(f"üîÑ Tiempo batch: {batch_time:.2f}ms para {len(animal_ids)} animales")
        print(f"üöÄ Speedup con cache: {first_time/max(cached_time, 0.1):.1f}x")
        
        print("\n‚úÖ TEST COMPLETADO - Optimizaciones verificadas")
        
        # Recomendaciones
        print("\nüìã RECOMENDACIONES:")
        print("1. Aplicar √≠ndices MySQL: mysql -u root -p finca < delete_performance_indexes_mysql.sql")
        print("2. Reiniciar backend para cargar todos los cambios")
        print("3. Actualizar frontend para usar endpoint /animals/{id}/delete-with-check")
        print("4. Monitorear tiempos de eliminaci√≥n en producci√≥n")

if __name__ == "__main__":
    test_complete_workflow()